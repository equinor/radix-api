/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package http

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"github.com/statoil/radix-api-go/http/controllers"
	"github.com/statoil/radix-api-go/http/types"
	"github.com/statoil/radix-api-go/http/utils"
	radixclient "github.com/statoil/radix-operator/pkg/client/clientset/versioned"
	"k8s.io/client-go/kubernetes"
	"net/http"
)

type APIRouter struct {
	Router      *mux.Router
	client      kubernetes.Interface
	radixclient radixclient.Interface
}

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewAPIRouter(kubeclient kubernetes.Interface, radixclient radixclient.Interface) *APIRouter {
	router := mux.NewRouter().StrictSlash(true)
	apiRouter := &APIRouter{
		router,
		kubeclient,
		radixclient,
	}

	apiRouter.Post("/api/v1/application", apiRouter.CreateApplication)
	apiRouter.Get("/api/v1/application/{appName}", apiRouter.GetApplication)
	apiRouter.Delete("/api/v1/application/{appName}", apiRouter.DeleteApplication)

	return apiRouter
}

//handler method
func (apiRouter *APIRouter) Post(path string, f func(w http.ResponseWriter, r *http.Request)) {
	apiRouter.Router.HandleFunc(path, f).Methods("POST")
}

func (apiRouter *APIRouter) Get(path string, f func(w http.ResponseWriter, r *http.Request)) {
	apiRouter.Router.HandleFunc(path, f).Methods("Get")
}

func (apiRouter *APIRouter) Put(path string, f func(w http.ResponseWriter, r *http.Request)) {
	apiRouter.Router.HandleFunc(path, f).Methods("Put")
}

func (apiRouter *APIRouter) Delete(path string, f func(w http.ResponseWriter, r *http.Request)) {
	apiRouter.Router.HandleFunc(path, f).Methods("Delete")
}

//handler method
func (apiRouter *APIRouter) CreateApplication(w http.ResponseWriter, r *http.Request) {
	var registration types.ApplicationRegistration
	if err := json.NewDecoder(r.Body).Decode(&registration); err != nil {
		utils.WriteError(w, r, http.StatusBadRequest, err)
		return
	}

	appRegistration, err := controllers.CreateApplication(apiRouter.radixclient, registration)
	if err != nil {
		utils.WriteError(w, r, http.StatusBadRequest, err)
		return
	}

	utils.JSONResponse(w, r, &appRegistration)
}

func (apiRouter *APIRouter) GetApplication(w http.ResponseWriter, r *http.Request) {
	appName := mux.Vars(r)["appName"]
	appRegistration, err := controllers.GetApplication(apiRouter.radixclient, appName)

	if err != nil {
		utils.WriteError(w, r, http.StatusBadRequest, err)
		return
	}

	utils.JSONResponse(w, r, &appRegistration)
}

func (apiRouter *APIRouter) DeleteApplication(w http.ResponseWriter, r *http.Request) {
	appName := mux.Vars(r)["appName"]
	err := controllers.DeleteApplication(appName)

	if err != nil {
		utils.WriteError(w, r, http.StatusBadRequest, err)
		return
	}

	utils.JSONResponse(w, r, "ok")
}
