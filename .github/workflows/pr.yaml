name: Pull-Request Testing
on:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build docker image
      run: docker build .

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.3

  test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install dependencies
        run: go mod download
      - name: Run Tests
        run: go test -cover `go list ./...`

  verify-code-generation:
    name: Verify Code Generation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Verify Code Generation
        run: |
          make verify-generate

  report-swagger-changes:
    name: Report Changes In Swagger Spec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: git fetch --no-tags --no-recurse-submodules --depth=1  origin master:master
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install Swagger
        run: go install github.com/go-swagger/go-swagger/cmd/swagger@v0.31.0
      - name: Check breaking changes
        if: always()
        id: breaking
        continue-on-error: true
        run: |
          main_swagger=$(git show main:swaggerui/html/swagger.json)
          breaking_changes=$(swagger diff --break <$main_swagger swaggerui/html/swagger.json) >> $GITHUB_OUTPUT
      - name: Add comment
        if: failure() && steps.breaking.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: console.log('${{ steps.breaking.outputs.breaking_changes }}');

  validate-radixconfig:
    name: Test RadixConfig
    runs-on: ubuntu-latest
    steps:
      - name: 'Fake TOKEN FOR RADIX CLI'
        run: echo "APP_SERVICE_ACCOUNT_TOKEN=dummy" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: 'Validate'
        uses: equinor/radix-github-actions@v1
        with:
          args: validate radix-config --config-file radixconfig.yaml
