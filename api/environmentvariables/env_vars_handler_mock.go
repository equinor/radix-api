// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/environmentvariables/env_vars_handler.go

// Package environmentvariables is a generated GoMock package.
package environmentvariables

import (
	reflect "reflect"

	models "github.com/equinor/radix-api/api/environmentvariables/models"
	gomock "github.com/golang/mock/gomock"
)

// MockEnvVarsHandler is a mock of EnvVarsHandler interface.
type MockEnvVarsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEnvVarsHandlerMockRecorder
}

// MockEnvVarsHandlerMockRecorder is the mock recorder for MockEnvVarsHandler.
type MockEnvVarsHandlerMockRecorder struct {
	mock *MockEnvVarsHandler
}

// NewMockEnvVarsHandler creates a new mock instance.
func NewMockEnvVarsHandler(ctrl *gomock.Controller) *MockEnvVarsHandler {
	mock := &MockEnvVarsHandler{ctrl: ctrl}
	mock.recorder = &MockEnvVarsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvVarsHandler) EXPECT() *MockEnvVarsHandlerMockRecorder {
	return m.recorder
}

// ChangeEnvVar mocks base method.
func (m *MockEnvVarsHandler) ChangeEnvVar(appName, envName, componentName string, envVarsParams []models.EnvVarParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEnvVar", appName, envName, componentName, envVarsParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeEnvVar indicates an expected call of ChangeEnvVar.
func (mr *MockEnvVarsHandlerMockRecorder) ChangeEnvVar(appName, envName, componentName, envVarsParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEnvVar", reflect.TypeOf((*MockEnvVarsHandler)(nil).ChangeEnvVar), appName, envName, componentName, envVarsParams)
}

// GetComponentEnvVars mocks base method.
func (m *MockEnvVarsHandler) GetComponentEnvVars(appName, envName, componentName string) ([]models.EnvVar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentEnvVars", appName, envName, componentName)
	ret0, _ := ret[0].([]models.EnvVar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentEnvVars indicates an expected call of GetComponentEnvVars.
func (mr *MockEnvVarsHandlerMockRecorder) GetComponentEnvVars(appName, envName, componentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentEnvVars", reflect.TypeOf((*MockEnvVarsHandler)(nil).GetComponentEnvVars), appName, envName, componentName)
}
