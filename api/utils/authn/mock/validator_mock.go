// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/utils/authn/validator.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	token "github.com/equinor/radix-api/api/utils/authn"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenPrincipal is a mock of TokenPrincipal interface.
type MockTokenPrincipal struct {
	ctrl     *gomock.Controller
	recorder *MockTokenPrincipalMockRecorder
}

// MockTokenPrincipalMockRecorder is the mock recorder for MockTokenPrincipal.
type MockTokenPrincipalMockRecorder struct {
	mock *MockTokenPrincipal
}

// NewMockTokenPrincipal creates a new mock instance.
func NewMockTokenPrincipal(ctrl *gomock.Controller) *MockTokenPrincipal {
	mock := &MockTokenPrincipal{ctrl: ctrl}
	mock.recorder = &MockTokenPrincipalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenPrincipal) EXPECT() *MockTokenPrincipalMockRecorder {
	return m.recorder
}

// IsAuthenticated mocks base method.
func (m *MockTokenPrincipal) IsAuthenticated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthenticated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthenticated indicates an expected call of IsAuthenticated.
func (mr *MockTokenPrincipalMockRecorder) IsAuthenticated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthenticated", reflect.TypeOf((*MockTokenPrincipal)(nil).IsAuthenticated))
}

// Name mocks base method.
func (m *MockTokenPrincipal) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTokenPrincipalMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTokenPrincipal)(nil).Name))
}

// Token mocks base method.
func (m *MockTokenPrincipal) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockTokenPrincipalMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenPrincipal)(nil).Token))
}

// MockValidatorInterface is a mock of ValidatorInterface interface.
type MockValidatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorInterfaceMockRecorder
}

// MockValidatorInterfaceMockRecorder is the mock recorder for MockValidatorInterface.
type MockValidatorInterfaceMockRecorder struct {
	mock *MockValidatorInterface
}

// NewMockValidatorInterface creates a new mock instance.
func NewMockValidatorInterface(ctrl *gomock.Controller) *MockValidatorInterface {
	mock := &MockValidatorInterface{ctrl: ctrl}
	mock.recorder = &MockValidatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorInterface) EXPECT() *MockValidatorInterfaceMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockValidatorInterface) ValidateToken(arg0 context.Context, arg1 string) (token.TokenPrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(token.TokenPrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockValidatorInterfaceMockRecorder) ValidateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockValidatorInterface)(nil).ValidateToken), arg0, arg1)
}
