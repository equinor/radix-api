// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/deployments/deployment_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	models "github.com/equinor/radix-api/api/deployments/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDeployHandler is a mock of DeployHandler interface.
type MockDeployHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeployHandlerMockRecorder
}

// MockDeployHandlerMockRecorder is the mock recorder for MockDeployHandler.
type MockDeployHandlerMockRecorder struct {
	mock *MockDeployHandler
}

// NewMockDeployHandler creates a new mock instance.
func NewMockDeployHandler(ctrl *gomock.Controller) *MockDeployHandler {
	mock := &MockDeployHandler{ctrl: ctrl}
	mock.recorder = &MockDeployHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployHandler) EXPECT() *MockDeployHandlerMockRecorder {
	return m.recorder
}

// GetComponentsForDeployment mocks base method.
func (m *MockDeployHandler) GetComponentsForDeployment(ctx context.Context, appName, deploymentName, envName string) ([]*models.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentsForDeployment", ctx, appName, deploymentName, envName)
	ret0, _ := ret[0].([]*models.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentsForDeployment indicates an expected call of GetComponentsForDeployment.
func (mr *MockDeployHandlerMockRecorder) GetComponentsForDeployment(ctx, appName, deploymentName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentsForDeployment", reflect.TypeOf((*MockDeployHandler)(nil).GetComponentsForDeployment), ctx, appName, deploymentName, envName)
}

// GetComponentsForDeploymentName mocks base method.
func (m *MockDeployHandler) GetComponentsForDeploymentName(ctx context.Context, appName, deploymentID string) ([]*models.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentsForDeploymentName", ctx, appName, deploymentID)
	ret0, _ := ret[0].([]*models.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentsForDeploymentName indicates an expected call of GetComponentsForDeploymentName.
func (mr *MockDeployHandlerMockRecorder) GetComponentsForDeploymentName(ctx, appName, deploymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentsForDeploymentName", reflect.TypeOf((*MockDeployHandler)(nil).GetComponentsForDeploymentName), ctx, appName, deploymentID)
}

// GetDeploymentWithName mocks base method.
func (m *MockDeployHandler) GetDeploymentWithName(ctx context.Context, appName, deploymentName string) (*models.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentWithName", ctx, appName, deploymentName)
	ret0, _ := ret[0].(*models.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithName indicates an expected call of GetDeploymentWithName.
func (mr *MockDeployHandlerMockRecorder) GetDeploymentWithName(ctx, appName, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithName", reflect.TypeOf((*MockDeployHandler)(nil).GetDeploymentWithName), ctx, appName, deploymentName)
}

// GetDeploymentsForApplicationEnvironment mocks base method.
func (m *MockDeployHandler) GetDeploymentsForApplicationEnvironment(ctx context.Context, appName, environment string, latest bool) ([]*models.DeploymentSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsForApplicationEnvironment", ctx, appName, environment, latest)
	ret0, _ := ret[0].([]*models.DeploymentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsForApplicationEnvironment indicates an expected call of GetDeploymentsForApplicationEnvironment.
func (mr *MockDeployHandlerMockRecorder) GetDeploymentsForApplicationEnvironment(ctx, appName, environment, latest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsForApplicationEnvironment", reflect.TypeOf((*MockDeployHandler)(nil).GetDeploymentsForApplicationEnvironment), ctx, appName, environment, latest)
}

// GetDeploymentsForPipelineJob mocks base method.
func (m *MockDeployHandler) GetDeploymentsForPipelineJob(arg0 context.Context, arg1, arg2 string) ([]*models.DeploymentSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentsForPipelineJob", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.DeploymentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsForPipelineJob indicates an expected call of GetDeploymentsForPipelineJob.
func (mr *MockDeployHandlerMockRecorder) GetDeploymentsForPipelineJob(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsForPipelineJob", reflect.TypeOf((*MockDeployHandler)(nil).GetDeploymentsForPipelineJob), arg0, arg1, arg2)
}

// GetJobComponentDeployments mocks base method.
func (m *MockDeployHandler) GetJobComponentDeployments(arg0 context.Context, arg1, arg2, arg3 string) ([]*models.DeploymentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobComponentDeployments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.DeploymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobComponentDeployments indicates an expected call of GetJobComponentDeployments.
func (mr *MockDeployHandlerMockRecorder) GetJobComponentDeployments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobComponentDeployments", reflect.TypeOf((*MockDeployHandler)(nil).GetJobComponentDeployments), arg0, arg1, arg2, arg3)
}

// GetLogs mocks base method.
func (m *MockDeployHandler) GetLogs(ctx context.Context, appName, podName string, sinceTime *time.Time, logLines *int64, previousLog bool) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, appName, podName, sinceTime, logLines, previousLog)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockDeployHandlerMockRecorder) GetLogs(ctx, appName, podName, sinceTime, logLines, previousLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockDeployHandler)(nil).GetLogs), ctx, appName, podName, sinceTime, logLines, previousLog)
}
