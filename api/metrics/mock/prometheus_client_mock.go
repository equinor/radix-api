// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/metrics/prometheus_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	metrics "github.com/equinor/radix-api/api/metrics"
	internal "github.com/equinor/radix-api/api/metrics/internal"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
)

// MockPrometheusClient is a mock of PrometheusClient interface.
type MockPrometheusClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusClientMockRecorder
}

// MockPrometheusClientMockRecorder is the mock recorder for MockPrometheusClient.
type MockPrometheusClientMockRecorder struct {
	mock *MockPrometheusClient
}

// NewMockPrometheusClient creates a new mock instance.
func NewMockPrometheusClient(ctrl *gomock.Controller) *MockPrometheusClient {
	mock := &MockPrometheusClient{ctrl: ctrl}
	mock.recorder = &MockPrometheusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusClient) EXPECT() *MockPrometheusClientMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockPrometheusClient) GetMetrics(ctx context.Context, appName, envName, componentName, duration, since string) (map[internal.QueryName]model.Value, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, appName, envName, componentName, duration, since)
	ret0, _ := ret[0].(map[internal.QueryName]model.Value)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockPrometheusClientMockRecorder) GetMetrics(ctx, appName, envName, componentName, duration, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockPrometheusClient)(nil).GetMetrics), ctx, appName, envName, componentName, duration, since)
}

// GetMetricsByPod mocks base method.
func (m *MockPrometheusClient) GetMetricsByPod(ctx context.Context, appName, envName, duration string) (map[internal.QueryName][]metrics.QueryVectorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByPod", ctx, appName, envName, duration)
	ret0, _ := ret[0].(map[internal.QueryName][]metrics.QueryVectorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsByPod indicates an expected call of GetMetricsByPod.
func (mr *MockPrometheusClientMockRecorder) GetMetricsByPod(ctx, appName, envName, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByPod", reflect.TypeOf((*MockPrometheusClient)(nil).GetMetricsByPod), ctx, appName, envName, duration)
}

// MockPrometheusApiClient is a mock of PrometheusApiClient interface.
type MockPrometheusApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusApiClientMockRecorder
}

// MockPrometheusApiClientMockRecorder is the mock recorder for MockPrometheusApiClient.
type MockPrometheusApiClientMockRecorder struct {
	mock *MockPrometheusApiClient
}

// NewMockPrometheusApiClient creates a new mock instance.
func NewMockPrometheusApiClient(ctrl *gomock.Controller) *MockPrometheusApiClient {
	mock := &MockPrometheusApiClient{ctrl: ctrl}
	mock.recorder = &MockPrometheusApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusApiClient) EXPECT() *MockPrometheusApiClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockPrometheusApiClient) Query(ctx context.Context, query string, ts time.Time, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query, ts}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockPrometheusApiClientMockRecorder) Query(ctx, query, ts interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query, ts}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPrometheusApiClient)(nil).Query), varargs...)
}
