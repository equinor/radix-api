// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/metrics/metrics_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	metrics "github.com/equinor/radix-api/api/metrics"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCpuAverage mocks base method.
func (m *MockClient) GetCpuAverage(ctx context.Context, appName, envName, duration string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAverage", ctx, appName, envName, duration)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuAverage indicates an expected call of GetCpuAverage.
func (mr *MockClientMockRecorder) GetCpuAverage(ctx, appName, envName, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAverage", reflect.TypeOf((*MockClient)(nil).GetCpuAverage), ctx, appName, envName, duration)
}

// GetCpuRequests mocks base method.
func (m *MockClient) GetCpuRequests(ctx context.Context, appName, envName string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuRequests", ctx, appName, envName)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuRequests indicates an expected call of GetCpuRequests.
func (mr *MockClientMockRecorder) GetCpuRequests(ctx, appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuRequests", reflect.TypeOf((*MockClient)(nil).GetCpuRequests), ctx, appName, envName)
}

// GetMemoryMaximum mocks base method.
func (m *MockClient) GetMemoryMaximum(ctx context.Context, appName, envName, duration string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMaximum", ctx, appName, envName, duration)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMaximum indicates an expected call of GetMemoryMaximum.
func (mr *MockClientMockRecorder) GetMemoryMaximum(ctx, appName, envName, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMaximum", reflect.TypeOf((*MockClient)(nil).GetMemoryMaximum), ctx, appName, envName, duration)
}

// GetMemoryRequests mocks base method.
func (m *MockClient) GetMemoryRequests(ctx context.Context, appName, envName string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryRequests", ctx, appName, envName)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryRequests indicates an expected call of GetMemoryRequests.
func (mr *MockClientMockRecorder) GetMemoryRequests(ctx, appName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryRequests", reflect.TypeOf((*MockClient)(nil).GetMemoryRequests), ctx, appName, envName)
}
