// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/metrics/metrics_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	metrics "github.com/equinor/radix-api/api/metrics"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCpuAvg mocks base method.
func (m *MockClient) GetCpuAvg(ctx context.Context, appName, namespace, duration string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAvg", ctx, appName, namespace, duration)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuAvg indicates an expected call of GetCpuAvg.
func (mr *MockClientMockRecorder) GetCpuAvg(ctx, appName, namespace, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAvg", reflect.TypeOf((*MockClient)(nil).GetCpuAvg), ctx, appName, namespace, duration)
}

// GetCpuReqs mocks base method.
func (m *MockClient) GetCpuReqs(ctx context.Context, appName, namespace string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuReqs", ctx, appName, namespace)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuReqs indicates an expected call of GetCpuReqs.
func (mr *MockClientMockRecorder) GetCpuReqs(ctx, appName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuReqs", reflect.TypeOf((*MockClient)(nil).GetCpuReqs), ctx, appName, namespace)
}

// GetMemMax mocks base method.
func (m *MockClient) GetMemMax(ctx context.Context, appName, namespace, duration string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemMax", ctx, appName, namespace, duration)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemMax indicates an expected call of GetMemMax.
func (mr *MockClientMockRecorder) GetMemMax(ctx, appName, namespace, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemMax", reflect.TypeOf((*MockClient)(nil).GetMemMax), ctx, appName, namespace, duration)
}

// GetMemReqs mocks base method.
func (m *MockClient) GetMemReqs(ctx context.Context, appName, namespace string) ([]metrics.LabeledResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemReqs", ctx, appName, namespace)
	ret0, _ := ret[0].([]metrics.LabeledResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemReqs indicates an expected call of GetMemReqs.
func (mr *MockClientMockRecorder) GetMemReqs(ctx, appName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemReqs", reflect.TypeOf((*MockClient)(nil).GetMemReqs), ctx, appName, namespace)
}
