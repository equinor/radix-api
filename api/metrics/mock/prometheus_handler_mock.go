// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/metrics/prometheus_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/equinor/radix-api/api/applications/models"
	versioned "github.com/equinor/radix-operator/pkg/client/clientset/versioned"
	gomock "github.com/golang/mock/gomock"
)

// MockPrometheusHandler is a mock of PrometheusHandler interface.
type MockPrometheusHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusHandlerMockRecorder
}

// MockPrometheusHandlerMockRecorder is the mock recorder for MockPrometheusHandler.
type MockPrometheusHandlerMockRecorder struct {
	mock *MockPrometheusHandler
}

// NewMockPrometheusHandler creates a new mock instance.
func NewMockPrometheusHandler(ctrl *gomock.Controller) *MockPrometheusHandler {
	mock := &MockPrometheusHandler{ctrl: ctrl}
	mock.recorder = &MockPrometheusHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusHandler) EXPECT() *MockPrometheusHandlerMockRecorder {
	return m.recorder
}

// GetReplicaResourcesUtilization mocks base method.
func (m *MockPrometheusHandler) GetReplicaResourcesUtilization(ctx context.Context, radixClient versioned.Interface, appName, envName, duration string) (*models.ReplicaResourcesUtilizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaResourcesUtilization", ctx, radixClient, appName, envName, duration)
	ret0, _ := ret[0].(*models.ReplicaResourcesUtilizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaResourcesUtilization indicates an expected call of GetReplicaResourcesUtilization.
func (mr *MockPrometheusHandlerMockRecorder) GetReplicaResourcesUtilization(ctx, radixClient, appName, envName, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaResourcesUtilization", reflect.TypeOf((*MockPrometheusHandler)(nil).GetReplicaResourcesUtilization), ctx, radixClient, appName, envName, duration)
}

// GetUsedResources mocks base method.
func (m *MockPrometheusHandler) GetUsedResources(ctx context.Context, radixClient versioned.Interface, appName, envName, componentName, duration, since string) (*models.UsedResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedResources", ctx, radixClient, appName, envName, componentName, duration, since)
	ret0, _ := ret[0].(*models.UsedResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsedResources indicates an expected call of GetUsedResources.
func (mr *MockPrometheusHandlerMockRecorder) GetUsedResources(ctx, radixClient, appName, envName, componentName, duration, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedResources", reflect.TypeOf((*MockPrometheusHandler)(nil).GetUsedResources), ctx, radixClient, appName, envName, componentName, duration, since)
}
