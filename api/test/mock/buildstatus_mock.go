// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/buildstatus/models/buildstatus.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockPiplineBadgeBuilder is a mock of PiplineBadgeBuilder interface.
type MockPiplineBadgeBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockPiplineBadgeBuilderMockRecorder
}

// MockPiplineBadgeBuilderMockRecorder is the mock recorder for MockPiplineBadgeBuilder.
type MockPiplineBadgeBuilderMockRecorder struct {
	mock *MockPiplineBadgeBuilder
}

// NewMockPiplineBadgeBuilder creates a new mock instance.
func NewMockPiplineBadgeBuilder(ctrl *gomock.Controller) *MockPiplineBadgeBuilder {
	mock := &MockPiplineBadgeBuilder{ctrl: ctrl}
	mock.recorder = &MockPiplineBadgeBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPiplineBadgeBuilder) EXPECT() *MockPiplineBadgeBuilderMockRecorder {
	return m.recorder
}

// BuildBadge mocks base method.
func (m *MockPiplineBadgeBuilder) BuildBadge(condition v1.RadixJobCondition, pipeline v1.RadixPipelineType) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBadge", condition, pipeline)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBadge indicates an expected call of BuildBadge.
func (mr *MockPiplineBadgeBuilderMockRecorder) BuildBadge(condition, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBadge", reflect.TypeOf((*MockPiplineBadgeBuilder)(nil).BuildBadge), condition, pipeline)
}
