// Code generated by MockGen. DO NOT EDIT.
// Source: api/buildstatus/models/buildstatus.go

// Package mock_models is a generated GoMock package.
package mock

import (
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStatus is a mock of Status interface
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// WriteSvg mocks base method
func (m *MockStatus) WriteSvg(condition v1.RadixJobCondition) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSvg", condition)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteSvg indicates an expected call of WriteSvg
func (mr *MockStatusMockRecorder) WriteSvg(condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSvg", reflect.TypeOf((*MockStatus)(nil).WriteSvg), condition)
}
