// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/buildstatus/models/buildstatus.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockPipelineBadge is a mock of PipelineBadge interface.
type MockPipelineBadge struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineBadgeMockRecorder
}

// MockPipelineBadgeMockRecorder is the mock recorder for MockPipelineBadge.
type MockPipelineBadgeMockRecorder struct {
	mock *MockPipelineBadge
}

// NewMockPipelineBadge creates a new mock instance.
func NewMockPipelineBadge(ctrl *gomock.Controller) *MockPipelineBadge {
	mock := &MockPipelineBadge{ctrl: ctrl}
	mock.recorder = &MockPipelineBadgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineBadge) EXPECT() *MockPipelineBadgeMockRecorder {
	return m.recorder
}

// GetBadge mocks base method.
func (m *MockPipelineBadge) GetBadge(ctx context.Context, condition v1.RadixJobCondition, pipeline v1.RadixPipelineType) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadge", ctx, condition, pipeline)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadge indicates an expected call of GetBadge.
func (mr *MockPipelineBadgeMockRecorder) GetBadge(ctx, condition, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadge", reflect.TypeOf((*MockPipelineBadge)(nil).GetBadge), ctx, condition, pipeline)
}
